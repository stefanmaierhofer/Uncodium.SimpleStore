using NUnit.Framework;
using System;
using System.IO;

namespace Uncodium.SimpleStore.Tests
{
    [TestFixture]
    public class MultiOpenTests
    {
    
        [Test]
        public void CanOpenExistingStoreReadOnly()
        {
            var path = Path.GetFullPath(Path.GetRandomFileName());

            try
            {
                using (var storeRW = new SimpleDiskStore(path))
                {
                    storeRW.Add("foo", "bar");
                }

                using (var storeRO = new SimpleDiskStore(path, readOnlySnapshot: true, logLines: line => { }, initialSizeInBytes: 0))
                {
                    var x = storeRO.Get("foo");
                    Assert.AreEqual(x, "bar");
                }
            }
            finally
            {
                File.Delete(path);
                File.Delete(path + ".log");
            }

            Assert.False(File.Exists(path));
        }

        [Test]
        public void CanConcurrentlyOpenStoreReadWriteAndReadOnly()
        {
            var path = Path.GetFullPath(Path.GetRandomFileName());

            try
            {
                using (var storeRW = new SimpleDiskStore(path, readOnlySnapshot: false, logLines: line => { }, initialSizeInBytes: 0))
                {
                    storeRW.Add("foo", "bar");

                    using (var storeRO = new SimpleDiskStore(path, readOnlySnapshot: true, logLines: line => { }, initialSizeInBytes: 0))
                    {
                        var x = storeRO.Get("foo");
                        Assert.AreEqual(x, "bar");
                    }
                }
            }
            finally
            {
                File.Delete(path);
                File.Delete(path + ".log");
            }

            Assert.False(File.Exists(path));
        }
    }
}
