using Microsoft.Extensions.Azure;
using NUnit.Framework;
using System;
using System.IO;
using System.Text;
using System.Threading;

namespace Uncodium.SimpleStore.Tests
{
    [TestFixture]
    public class MultiOpenTests
    {
        private static SimpleDiskStore OpenReadOnly(string path)
            => new(path, readOnlySnapshot: true, logLines: line => { }, initialSizeInBytes: 0);

        private static SimpleDiskStore OpenFull(string path)
            => new(path, readOnlySnapshot: false, logLines: line => { }, initialSizeInBytes: 0);

        private static void DeleteTestStore(string path)
        {
            for (var i = 0; i < 10; i++)
            {
                try
                {
                    File.Delete(path);
                    File.Delete(path + ".log");
                    break;
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                    Thread.Sleep(100);
                }
            }
        }


        [Test]
        public void Fails_ReadA()
        {
            var path = Path.GetFullPath(Path.GetRandomFileName());

            Assert.Throws<FileNotFoundException>(() => OpenReadOnly(path));
        }

        [Test]
        public void Fails_WriteA_WriteB()
        {
            var path = Path.GetFullPath(Path.GetRandomFileName());

            try
            {
                var a = OpenFull(path);

                Assert.Throws<UnauthorizedAccessException>(() => OpenFull(path));

                a.Dispose();
            }
            finally
            {
                DeleteTestStore(path);
            }

            Assert.False(File.Exists(path));
        }

        [Test]
        public void WriteA()
        {
            var path = Path.GetFullPath(Path.GetRandomFileName());

            var _ = OpenFull(path);
        }

        [Test]
        public void WriteA_CloseA_WriteB()
        {
            var path = Path.GetFullPath(Path.GetRandomFileName());

            try
            {
                var a = OpenFull(path);
                a.Dispose();

                var b = OpenFull(path);
                b.Dispose();
            }
            finally
            {
                DeleteTestStore(path);
            }

            Assert.False(File.Exists(path));
        }

        [Test]
        public void FullA_CloseA_ReadB()
        {
            var path = Path.GetFullPath(Path.GetRandomFileName());

            try
            {
                var a = OpenFull(path);
                a.Add("foo", "bar");
                a.Dispose();

                var b = OpenReadOnly(path);
                Assert.AreEqual(b.Get("foo"), "bar");
                b.Dispose();
            }
            finally
            {
                DeleteTestStore(path);
            }

            Assert.False(File.Exists(path));
        }

        [Test]
        public void FullA_ReadB()
        {
            var path = Path.GetFullPath(Path.GetRandomFileName());

            try
            {
                var a = OpenFull(path);
                a.Add("foo", "bar");

                var b = OpenReadOnly(path);
                Assert.AreEqual(b.Get("foo"), "bar");

                a.Dispose();
                b.Dispose();
            }
            finally
            {
                DeleteTestStore(path);
            }

            Assert.False(File.Exists(path));
        }

        [Test]
        public void ReadA_FullB() 
        {
            var path = Path.GetFullPath(Path.GetRandomFileName());

            var init = OpenFull(path);
            init.Add("foo", "bar");
            init.Dispose();

            try 
            {
                using var a = OpenReadOnly(path);
                Assert.AreEqual(a.Get("foo"), "bar");

                using var b = OpenFull(path);
                Assert.AreEqual(b.Get("foo"), "bar");
            }
            finally
            {
                DeleteTestStore(path);
            }

            Assert.False(File.Exists(path));
        }

        [Test]
        public void FullA_ReadB_ReadC()
        {
            var path = Path.GetFullPath(Path.GetRandomFileName());

            try
            {
                var a = OpenFull(path);
                a.Add("foo", "bar");

                var b = OpenReadOnly(path);
                var x = b.Get("foo");
                Assert.AreEqual(x, "bar");

                var c = OpenReadOnly(path);
                var x2 = c.Get("foo");
                Assert.AreEqual(x2, "bar");

                a.Dispose();
                b.Dispose();
                c.Dispose();
            }
            finally
            {
                DeleteTestStore(path);
            }

            Assert.False(File.Exists(path));
        }

        [Test]
        public void FullA_CloseA_ReadB_FullC_ReadD()
        {
            var path = Path.GetFullPath(Path.GetRandomFileName());

            try
            {
                var a = OpenFull(path);
                a.Add("foo", "bar");
                a.Dispose();

                var b = OpenReadOnly(path);
                Assert.AreEqual(b.Get("foo"), "bar");

                var c = OpenFull(path);
                c.Add("foo1", "bar1");

                var d = OpenReadOnly(path);
                Assert.AreEqual(d.Get("foo"), "bar");
                Assert.AreEqual(d.Get("foo1"), "bar1");

                b.Dispose();
                c.Dispose();
                d.Dispose();
            }
            finally
            {
                DeleteTestStore(path);
            }

            Assert.False(File.Exists(path));
        }

        [Test]
        public void FullA_ReadB_CloseA_ReadC()
        {
            var path = Path.GetFullPath(Path.GetRandomFileName());

            try
            {
                var a = OpenFull(path);

                var b = OpenReadOnly(path);

                a.Dispose();

                var c = OpenReadOnly(path);

                b.Dispose();
                c.Dispose();
            }
            finally
            {
                DeleteTestStore(path);
            }

            Assert.False(File.Exists(path));
        }

        [Test]
        public void Issue_20221107()
        {
            // simple reproduction of https://github.com/vrvis/Vgm.Api/issues/38#issuecomment-1305521514

            var path = Path.GetFullPath(Path.GetRandomFileName());

            try
            {
                var id = "my_key";

                // -----------------------------------------------------
                // create store, add entry and close again ...
                var a = OpenFull(path);
                a.Add(id, "content");
                a.Dispose();

                // -----------------------------------------------------
                // now open read-only ...
                var b = OpenReadOnly(path);
                // check if entry is found in read-only-store ...
                Assert.AreEqual(b.Get(id), "content");
                // and leave read-only store open ...

                // -----------------------------------------------------
                // now open write (in addition to read-only) ...
                var c = OpenFull(path);
                // check if entry is found in writeable-store ...
                Assert.AreEqual(c.Get(id), "content");

                // -----------------------------------------------------
                // close everything
                b.Dispose();
                c.Dispose();
            }
            finally
            {
                DeleteTestStore(path);
            }

            Assert.False(File.Exists(path));
        }

        [Test]
        public void Issue_20230307() 
        {
            const string STOREPATH = @"T:\tmp\test";
            File.Delete(STOREPATH);

            var storeWrite = new SimpleDiskStore(STOREPATH);
            storeWrite.Add("foo", "bar");
            storeWrite.Dispose();

            var storeReadOnly = SimpleDiskStore.OpenReadOnlySnapshot(STOREPATH);
            storeWrite = new SimpleDiskStore(STOREPATH);

            try
            {
                var reservedBytes = storeWrite.GetReservedBytes();
                var usedBytes = storeWrite.GetUsedBytes();
                var freeSize = reservedBytes - usedBytes;
                storeWrite.EnsureSpaceFor(storeWrite.GetReservedBytes() * 2);
            }
            catch (IOException)
            {
                //storeWrite.Dispose();
                storeReadOnly.Dispose();

                storeWrite = new SimpleDiskStore(STOREPATH);
                var reservedBytes = storeWrite.GetReservedBytes();
                var usedBytes = storeWrite.GetUsedBytes();
                var freeSize = reservedBytes - usedBytes;
                storeWrite.Add("segfault", new byte[freeSize]);
            }

            Console.WriteLine("done");
        }
    }
}
